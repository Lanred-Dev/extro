from typing import overload


class Vector2:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, x: float, y: float) -> None: ...

    @property
    def x(self) -> float: ...

    @x.setter
    def x(self, arg: float, /) -> None: ...

    @property
    def y(self) -> float: ...

    @y.setter
    def y(self, arg: float, /) -> None: ...

    def magnitude(self) -> float: ...

    def dot(self, other: Vector2) -> float: ...

    def to_tuple(self) -> tuple: ...

    def copy(self) -> Vector2: ...

    def __add__(self, arg: Vector2, /) -> Vector2: ...

    def __sub__(self, arg: Vector2, /) -> Vector2: ...

    @overload
    def __mul__(self, arg: float, /) -> Vector2: ...

    @overload
    def __mul__(self, arg: Vector2, /) -> Vector2: ...

    @overload
    def __truediv__(self, arg: float, /) -> Vector2: ...

    @overload
    def __truediv__(self, arg: Vector2, /) -> Vector2: ...

    def __iadd__(self, arg: Vector2, /) -> Vector2: ...

    def __isub__(self, arg: Vector2, /) -> Vector2: ...

    def __imul__(self, arg: float, /) -> Vector2: ...

    def __itruediv__(self, arg: float, /) -> Vector2: ...

    def __eq__(self, arg: object, /) -> bool: ...

    def __ne__(self, arg: object, /) -> bool: ...

    def __lt__(self, arg: Vector2, /) -> bool: ...

    def __le__(self, arg: Vector2, /) -> bool: ...

    def __gt__(self, arg: Vector2, /) -> bool: ...

    def __ge__(self, arg: Vector2, /) -> bool: ...

    def __repr__(self) -> str: ...
